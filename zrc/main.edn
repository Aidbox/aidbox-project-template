{ns main
 import #{aidbox awf.scheduler}

 custom-patient-topic
 {:zen/tags #{fhir.topic-based-subscription/topic-definition}
  :url "http://aidbox.app/SubscriptionTopic/patients"
  :resourceTrigger [{:resource "PatientSubsZen"}]

  #_#_:canFilterBy [{:resource        "PatientSubsZen"
                 :filterParameter "value"
                 :_fhirPath       "%current.value.ofType(Quantity).value"
                 :modifier        ["eq" "gt" "lt" "ge" "le"]}

                {:resource        "PatientSubsZen"
                 :filterParameter "value-increase"
                 :_fhirPath       "%current.value.ofType(Quantity).value > %previous.value.ofType(Quantity).value"
                 :modifier        ["eq"]}]}

 postgres-custom-patient-topic-storage
 {:zen/tags #{fhir.topic-based-subscription/topic-storage}
  :storage-type fhir.topic-based-subscription/postgres
  :timeout  1
  :status-interval 10
  :maxCount 100
  :heartbeat-rate 120
  :senders-number 2
  :maxContent "full-resource"
  :table-name "custom_patient_topic"}

 custom-patient-topic-srv
 {:zen/tags #{aidbox/service}
  :engine fhir.topic-based-subscription/change-data-capture-service-engine
  :topic-definition custom-patient-topic
  :topic-storage postgres-custom-patient-topic-storage}


 cleanup-task-schedule
 {:zen/tags #{awf.scheduler/rule}
  :schedule "*/5 * * * *" ;; every five minutes
  :concurrency-policy "forbid"
  :start-deadline-seconds 60
  :task-request {:definition fhir.topic-based-subscription/topic-based-subscriptions-clean-up-task
                 :params {:retention-period {:value 10 :unit "minute"} ;; keep events for 10 minutes
                          :cdc-service "main/custom-patient-topic-srv"}}}

 scheduler-service
 {:zen/tags #{aidbox/service}
  :engine awf.scheduler/task-scheduler-service-engine
  :rules #{cleanup-task-schedule}}

 box
 {:zen/tags #{aidbox/system}
  :services {:custom-patient-topic-srv custom-patient-topic-srv
             :cleanup-task-scheduler scheduler-service}}}
